#[Generic]
#--advertise-address    向集群成员通知apiserver消息的IP地址。这个地址必须能够被集群中其他成员访问。如果IP地址为空，将会使用--bind-address，如果未指定--bind-address，将会使用主机的默认接口地址。
KUBE_APISERVER_ADVERTISE_ADDRESS="192.168.159.3"

#[Etcd]
#--etcd-servers strings                     连接的etcd服务器列表,形式为（scheme://ip:port)，使用逗号分隔。
KUBE_APISERVER_ETCD_SERVERS="https://192.168.159.3:2379,https://192.168.159.3:2379"
#--etcd-cafile string                       用于保护etcd通信的SSL CA文件。
KUBE_APISERVER_ETCD_CA="/opt/etcd/pki/ca.pem"
#--etcd-certfile string                     用于保护etcd通信的的SSL证书文件。
KUBE_APISERVER_ETCD_CERT="/opt/etcd/pki/etcdctl.pem"
#--etcd-keyfile string                      用于保护etcd通信的SSL密钥文件.
KUBE_APISERVER_ETCD_KEY="/opt/etcd/pki/etcdctl-key.pem"

#[Secure]
#--bind-address ip                        监听--seure-port的IP地址。被关联的接口必须能够被集群其它节点和CLI/web客户端访问。如果为空，则将使用所有接口（0.0.0.0）。（默认值0.0.0.0）
KUBE_APISERVER_BIND_ADDRESS="192.168.159.3"
#--secure-port int                        用于监听具有认证授权功能的HTTPS协议的端口。如果为0，则不会监听HTTPS协议。 （默认值6443)
KUBE_APISERVER_SECURE_PORT=6443
#--cert-dir string                        存放TLS证书的目录。如果提供了--tls-cert-file和--tls-private-key-file选项，该标志将被忽略。（默认值 "/var/run/kubernetes"）
KUBE_APISERVER_CERT_DIR=""
#--tls-cert-file string                   包含用于HTTPS的默认x509证书的文件。（如果有CA证书，则附加于server证书之后）。如果启用了HTTPS服务，并且没有提供--tls-cert-file和--tls-private-key-file，则将为公共地址生成一个自签名的证书和密钥并保存于/var/run/kubernetes目录。
KUBE_APISERVER_TLS_CERT="/opt/k8s/master/pki/kube-apiserver.pem"
#--tls-private-key-file string            包含匹配--tls-cert-file的x509证书私钥的文件。
KUBE_APISERVER_TLS_PRIVATE_KEY="/opt/k8s/master/pki/kube-apiserver-key.pem"

#[Authentication]
#--anonymous-auth                          启用到API server的安全端口的匿名请求。未被其他认证方法拒绝的请求被当做匿名请求。匿名请求的用户名为system:anonymous，用户组名为system:unauthenticated。（默认值true）
KUBE_APISERVER_ANONYMOUS_AUTH=true
#--client-ca-file string                   如果设置此标志，对于任何请求，如果存包含client-ca-file中的authorities签名的客户端证书，将会使用客户端证书中的CommonName对应的身份进行认证。
KUBE_APISERVER_CLIENT_CA="/opt/k8s/master/pki/ca.pem"
#--service-account-key-file stringArray    包含PEM加密的x509 RSA或ECDSA私钥或公钥的文件，用于验证ServiceAccount令牌。
# 如果设置该值，--tls-private-key-file将会被使用。指定的文件可以包含多个密钥，并且这个标志可以和不同的文件一起多次使用。
KUBE_APISERVER_SERVICE_ACCOUNT_KEY="/opt/k8s/master/pki/ca-key.pem"
#--enable-bootstrap-token-auth             启用此选项以允许'kube-system'命名空间中的'bootstrap.kubernetes.io/token'类型密钥可以被用于TLS的启动认证。
KUBE_APISERVER_ENABLE_BOOTSTRAP_TOKEN_AUTH="--enable-bootstrap-token-auth"
#--token-auth-file string                  如果设置该值，这个文件将被用于通过令牌认证来保护API服务的安全端口。
KUBE_APISERVER_TOKEN_AUTH_FILE="/opt/k8s/master/etc/token.csv"

#[Authorization]
#--authorization-mode strings              在安全端口上进行权限验证的插件的顺序列表。以逗号分隔的列表，包括：AlwaysAllow,AlwaysDeny,ABAC,Webhook,RBAC,Node.（默认值"AlwaysAllow"）
KUBE_APISERVER_AUTHORIZATION_MODE="RBAC,Node"

#[Admission]
#--enable-admission-plugins strings       除了默认启用的插件外，还可以启用的准入控件(NamespaceLifecycle, LimitRanger, ServiceAccount, TaintNodesByCondition, Priority, DefaultTolerationSeconds, DefaultStorageClass, StorageObjectInUseProtection, PersistentVolumeClaimResize, MutatingAdmissionWebhook, ValidatingAdmissionWebhook, ResourceQuota).
#        逗号分隔的准入控件列表: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DefaultStorageClass, DefaultTolerationSeconds, DenyEscalatingExec, DenyExecOnPrivileged, EventRateLimit, ExtendedResourceToleration, ImagePolicyWebhook, LimitPodHardAntiAffinityTopology, LimitRanger, MutatingAdmissionWebhook, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, NodeRestriction, OwnerReferencesPermissionEnforcement, PersistentVolumeClaimResize, PersistentVolumeLabel, PodNodeSelector, PodPreset, PodSecurityPolicy, PodTolerationRestriction, Priority, ResourceQuota, SecurityContextDeny, ServiceAccount, StorageObjectInUseProtection, TaintNodesByCondition, ValidatingAdmissionWebhook. 这个标志中插件的顺序并不重要.
KUBE_APISERVER_ENABLE_ADMISSION_PLUGINS="NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction"

#[Misc]
#--allow-privileged                       如果为true, 将允许特权容器.
KUBE_APISERVER_ALLOW_PRIVILEGED=true
#--apiserver-count int                    集群中运行的apiserver数量，必须为正数。（默认值1）
KUBE_APISERVER_APISERVER_COUNT=1
#--service-cluster-ip-range ipNet         CIDR表示的IP范围，服务的cluster ip将从中分配。 一定不要和分配给nodes和pods的IP范围产生重叠(默认 10.0.0.0/24)。
KUBE_APISERVER_SERVICE_CLUSTER_IP_RANGE="10.0.0.0/24"
#--service-node-port-range portRange      service可映射到物理机的NodePort端口分配范围. 如: '30000-32767'. 包括范围的两端. (默认 30000-32767)
KUBE_APISERVER_SERVICE_NODE_PORT_RANGE="30000-50000"

#[Global]
#--log-dir   日志目录
#--log-file  日志文件
#--logtostderr                      开启标准输出日志，设置为false将日志写入文件，默认：true
KUBE_APISERVER_LOGTOSTDERR=true
#-v, --v Level                      日志等级
KUBE_APISERVER_LOG_LEVEL=4

#[OPTIONS]
KUBE_APISERVER_INSECURE_OPTS=""
KUBE_APISERVER_SECURE_OPTS="--advertise-address=192.168.159.3 \
--bind-address=192.168.159.3 \
--secure-port=6443 \
--service-cluster-ip-range=10.0.0.0/24 \
--service-node-port-range=30000-50000 \
--etcd-servers=https://192.168.159.3:2379,https://192.168.159.3:2379 \
--etcd-cafile=/opt/etcd/pki/ca.pem \
--etcd-certfile=/opt/etcd/pki/etcdctl.pem \
--etcd-keyfile=/opt/etcd/pki/etcdctl-key.pem \
--allow-privileged=true \
--enable-admission-plugins=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction \
--authorization-mode=RBAC,Node \
--enable-bootstrap-token-auth \
--token-auth-file=/opt/k8s/master/etc/token.csv \
--tls-cert-file=/opt/k8s/master/pki/kube-apiserver.pem \
--tls-private-key-file=/opt/k8s/master/pki/kube-apiserver-key.pem \
--client-ca-file=/opt/k8s/master/pki/ca.pem \
--service-account-key-file=/opt/k8s/master/pki/ca-key.pem \
--logtostderr=true \
--v=4
"


